"""
    Misc utils
"""
import os
from multiprocessing import Process
import torch as ch
import dill


# Read environment variables
CACHE_PATH = os.environ.get("MIB_CACHE_SOURCE", None)
DATA_SOURCE = os.environ.get("MIB_DATA_SOURCE", None)


def get_models_path():
    """
    Get path to models.
    Returns:
        str: path to models
    """
    return os.path.join(get_cache_path(), "models")


def get_signals_path():
    """
    Get path to signals (generated by attacks).
    Returns:
        str: path to attack signals
    """
    return os.path.join(get_cache_path(), "signals")


def get_misc_path():
    """
    Get path to misc information (used/generated by attacks).
    Returns:
        str: path to misc information
    """
    return os.path.join(get_cache_path(), "misc")


def get_cache_path():
    """
    Get path to cache directory.
    Returns:
        str: path to cache directory
    """
    if CACHE_PATH is None:
        raise ValueError("MIB_CACHE_SOURCE= environment variable not set")
    return CACHE_PATH


def get_data_source():
    """
    Get path to data source directory.
    Returns:
        str: path to data source directory
    """
    if DATA_SOURCE is None:
        raise ValueError("MIB_DATA_SOURCE environment variable not set")
    return DATA_SOURCE


def meta_run_cache():
    """
        Cache for dumping run-wise processed features
        to speed up meta-classifier training.
        Returns:
            str: path to cache directory
    """
    if CACHE_PATH is None:
        raise ValueError("MIB_CACHE_SOURCE environment variable not set")
    return os.path.join(CACHE_PATH, "meta_run_cache")


class DillProcess(Process):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._target = dill.dumps(
            self._target
        )  # Save the target function as bytes, using dill

    def run(self):
        if self._target:
            self._target = dill.loads(
                self._target
            )  # Unpickle the target function before executing
            self._target(*self._args, **self._kwargs)  # Execute the target function
